// Jessie Shteif
// COP 3502-0038 lab 9

#include <stdio.h>
#include <stdlib.h>

#define HASH_SIZE 10

// RecordType
struct RecordType
{
	int		id;
	char	name;
	int		order; 
};

// hashNode
struct HashNode
{
    struct RecordType data;
    struct HashNode *next; // For handling collisions with chaining
};

// Fill out this structure
struct HashType
{
    struct HashNode *table[HASH_SIZE];
};

// Compute the hash function
int hash(int x)
{
    return x % HASH_SIZE; // simple modulo hashing
}

// parses input file to an integer array 
int parseData(char *inputFileName, struct RecordType **ppData)
{
    FILE *inFile = fopen(inputFileName, "r");
    int dataSz = 0;
    int i, n;
    char c;
    struct RecordType *pRecord;
    *ppData = NULL;

    if (inFile)
    {
        fscanf(inFile, "%d\n", &dataSz);
        *ppData = (struct RecordType *)malloc(sizeof(struct RecordType) * dataSz);
        if (*ppData == NULL)
        {
            printf("Cannot allocate memory\n");
            exit(-1);
        }
        for (i = 0; i < dataSz; ++i)
        {
            pRecord = *ppData + i;
            fscanf(inFile, "%d ", &n);
            pRecord->id = n;
            fscanf(inFile, "%c ", &c);
            pRecord->name = c;
            fscanf(inFile, "%d ", &n);
            pRecord->order = n;
        }

        fclose(inFile);
    }

    return dataSz;
}

// prints the records
void printRecords(struct RecordType pData[], int dataSz)
{
    int i;
    printf("\nRecords:\n");
    for (i = 0; i < dataSz; ++i)
    {
        printf("\t%d %c %d\n", pData[i].id, pData[i].name, pData[i].order);
    }
    printf("\n\n");
}

// display records in the hash structure
// skip the indices which are free
// the output will be in the format:
// index x -> id, name, order -> id, name, order ....
void displayRecordsInHash(struct HashType *pHashArray, int hashSz)
{
    int i;

    printf("\nRecords in Hash Table:\n");
    for (i = 0; i < hashSz; ++i)
    {
        printf("Index %d -> ", i);
        struct HashNode *currentNode = pHashArray->table[i];
        while (currentNode != NULL)
        {
            printf("%d %c %d -> ", currentNode->data.id, currentNode->data.name, currentNode->data.order);
            currentNode = currentNode->next;
        }
        printf("NULL\n");
    }
}

int main(void)
{
    struct RecordType *pRecords;
    int recordSz = 0;

    recordSz = parseData("input.txt", &pRecords);
    printRecords(pRecords, recordSz);

    // Initialize Hash Table
    struct HashType hashTable;
    for (int i = 0; i < HASH_SIZE; i++)
    {
        hashTable.table[i] = NULL; // Initialize each bucket to NULL
    }

    // Insert records into the hash table
    for (int i = 0; i < recordSz; ++i)
    {
        int index = hash(pRecords[i].id); // Calculate index using hash function
        struct HashNode *newNode = (struct HashNode *)malloc(sizeof(struct HashNode));
        newNode->data = pRecords[i];
        newNode->next = hashTable.table[index];
        hashTable.table[index] = newNode;
    }

    // Display records stored in the hash table
    displayRecordsInHash(&hashTable, HASH_SIZE);

    return 0;
}
